{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "440c7f56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2025-07-30 19:01:01] 1페이지 데이터 수집 중...\n",
      "[2025-07-30 19:01:03] 2페이지 데이터 수집 중...\n",
      "[2025-07-30 19:01:03] 1페이지까지 수집 완료 (더 이상 데이터가 없습니다)\n",
      "데이터가 'land_data.json'에 JSON 형식으로 저장되었습니다.\n",
      "[2025-07-30 19:01:03] 전체 1개의 매물 데이터가 land_data.json에 저장되었습니다.\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import json\n",
    "from datetime import datetime\n",
    "import codecs\n",
    "import time\n",
    "import pandas as pd\n",
    "from bs4 import BeautifulSoup \n",
    "\n",
    "\n",
    "def get_coords_from_kakao(query, api_key):\n",
    "    url = \"https://dapi.kakao.com/v2/local/search/keyword.json\"\n",
    "    headers = {\"Authorization\": f\"KakaoAK {api_key}\"}\n",
    "    params = {\"query\": query}\n",
    "    try:\n",
    "        response = requests.get(url, headers=headers, params=params)\n",
    "        response.raise_for_status() # Raise an exception for HTTP errors\n",
    "        res = response.json()\n",
    "        if res[\"documents\"]:\n",
    "            doc = res[\"documents\"][0]\n",
    "            return doc[\"y\"], doc[\"x\"]  # 위도, 경도\n",
    "        return None, None\n",
    "    except requests.exceptions.RequestException as e:\n",
    "        print(f\"Error fetching coordinates from Kakao: {e}\")\n",
    "        return None, None\n",
    "\n",
    "def get_real_estate_data(cortar_no, page=1):\n",
    "\n",
    "    cookies = {\n",
    "        'page_uid': 'j4DEOdqo1awss5k5NJ8sssssscN-065567',\n",
    "        'NNB': 'YPBLFJKGM2EWQ',\n",
    "        'BUC': 'pmQb6a3t8kgwgak2eQVn-NKGXIxPS71gSAysRtmDeFs=',\n",
    "        'SRT30': '1753837875',\n",
    "        'NAC': 'PZScBsglQCk4',\n",
    "        'NACT': '1',\n",
    "        'nhn.realestate.article.rlet_type_cd': 'A01',\n",
    "        'nhn.realestate.article.trade_type_cd': '',\n",
    "        'nhn.realestate.article.ipaddress_city': '1100000000',\n",
    "        '_fwb': '200xigIMu2x4HrfpI76qOJG.1753852167020',\n",
    "        'landHomeFlashUseYn': 'Y',\n",
    "        'REALESTATE': 'Wed%20Jul%2030%202025%2015%3A10%3A27%20GMT%2B0900%20(Korean%20Standard%20Time)',\n",
    "        'PROP_TEST_KEY': '1753855827492.46a3db9aa221b8841f121e27e5ea75e313732f378b5832688b77bf72632d4a58',\n",
    "        'PROP_TEST_ID': 'bd8d94ad55e64024075d59e5ee55fd4d11089b1f6cb954c3ef606df755fb9fb3',\n",
    "        'SRT5': '1753854953',\n",
    "        'SHOW_FIN_BADGE': 'Y',\n",
    "        'bnb_tooltip_shown_finance_v1': 'true',\n",
    "    }\n",
    "\n",
    "    headers = {\n",
    "        \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64)\",\n",
    "        'accept': '*/*',\n",
    "        'accept-language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',\n",
    "        'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IlJFQUxFU1RBVEUiLCJpYXQiOjE3NTM4NjMxOTEsImV4cCI6MTc1Mzg3Mzk5MX0.RXS5sM5j0p9Ybi46zxMsoQ6efVVJVbqW5Y0dcMIMcJE', # Placeholder: This token is dynamic. You might need to capture it from a live session or implement a way to generate/extract it.\n",
    "        'priority': 'u=1, i',\n",
    "        'referer': 'https://new.land.naver.com/articles?ms=37.4871026,127.0645068,17&a=APT:OPST:ABYG:OBYG:GM:OR:DDDGG:JWJT:SGJT:HOJT:VL:YR:DSD&e=RETAIL&g=1000&aa=SMALLSPCRENT&ae=ONEROOM', # Example referer, can be dynamic\n",
    "        'sec-ch-ua': '\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"',\n",
    "        'sec-ch-ua-mobile': '?0',\n",
    "        'sec-ch-ua-platform': '\"Windows\"',\n",
    "    }\n",
    "\n",
    "    url = \"https://new.land.naver.com/api/articles\"\n",
    "\n",
    "    params = {\n",
    "        'cortarNo': str(cortar_no),\n",
    "        'order': 'rank',\n",
    "        'realEstateType': 'APT:OPST:ABYG:OBYG:GM:OR:DDDGG:JWJT:SGJT:HOJT:VL:YR:DSD:YR:DSD:YR:DSD:YR:DSD:YR:DSD:YR:DSD:YR:DSD:YR:DSD:YR:DSD:YR:DSD:YR:DSD:YR:DSD:YR:DSD',\n",
    "        'tradeType': '', \n",
    "        'tag': ':::::::SMALLSPCRENT:ONEROOM', \n",
    "        'rentPriceMin': '0',  #최소 월세\n",
    "        'rentPriceMax': '9000000', #최대 월세\n",
    "        'priceMin': '0', #최소 보증금\n",
    "        'priceMax': '90000000',  #최대 보증금\n",
    "        'areaMin': '0',\n",
    "        'areaMax': '900000000',\n",
    "        'oldBuildYears': '',\n",
    "        'recentlyBuildYears': '',\n",
    "        'minHouseHoldCount': '',\n",
    "        'maxHouseHoldCount': '',\n",
    "        'showArticle': 'false',\n",
    "        'sameAddressGroup': 'false',\n",
    "        'minMaintenanceCost': '',\n",
    "        'maxMaintenanceCost': '',\n",
    "        'priceType': 'RETAIL',\n",
    "        'directions': '',\n",
    "        'page': str(page),\n",
    "        'articleState': '',\n",
    "    }\n",
    "\n",
    "    try:\n",
    "        response = requests.get(url, params=params, cookies=cookies, headers=headers)\n",
    "        response.raise_for_status()  # Raise an exception for HTTP errors\n",
    "        return response.json()\n",
    "    except requests.exceptions.RequestException as e:\n",
    "        print(f\"Error during API request: {e}\")\n",
    "        return None\n",
    "\n",
    "def save_to_json(all_data, filename):\n",
    "    if not filename.endswith('.json'):\n",
    "        filename = filename.split('.')[0] + '.json'\n",
    "    try:\n",
    "\n",
    "        with codecs.open(f'./../data/{filename}', 'w', encoding='utf-8') as f:\n",
    "            json.dump(all_data, f, ensure_ascii=False, indent=4)\n",
    "        print(f\"데이터가 '{filename}'에 JSON 형식으로 저장되었습니다.\")\n",
    "    except Exception as e:\n",
    "        print(f\"JSON 파일 저장 중 오류 발생: {e}\")\n",
    "\n",
    "def main():\n",
    "    with open('./../data/cortar.json','r',encoding='utf-8') as file:\n",
    "        co_data = json.load(file)\n",
    "\n",
    "    key='서울특별시 종로구 낙원동' #임의로 넣은 값이며 구현 때 메인에서 받아올 값입니다!\n",
    "\n",
    "    cortar_no = (co_data.get(key,None))\n",
    "\n",
    "    filename = f'land_data.json'\n",
    "\n",
    "    try:\n",
    "        all_articles = []  # 전체 페이지의 데이터를 저장할 리스트\n",
    "\n",
    "        for page in range(1, 101): # Increased page range, but will stop if no more articles\n",
    "            print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {page}페이지 데이터 수집 중...\")\n",
    "\n",
    "            # API에서 데이터 가져오기\n",
    "            data = get_real_estate_data(cortar_no, page)\n",
    "\n",
    "            if data is None:\n",
    "                print(f\"데이터를 가져오는 데 실패했습니다. {page}페이지에서 중단합니다.\")\n",
    "                break\n",
    "\n",
    "            # 페이지의 매물 목록 가져오기\n",
    "            articles = data.get('articleList', [])\n",
    "\n",
    "            # 매물이 없으면 반복 중단\n",
    "            if not articles:\n",
    "                print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {page-1}페이지까지 수집 완료 (더 이상 데이터가 없습니다)\")\n",
    "                break\n",
    "\n",
    "            # 전체 리스트에 추가\n",
    "            all_articles.extend(articles)\n",
    "\n",
    "            # 서버 부하를 줄이기 위한 딜레이\n",
    "            time.sleep(1) # Be mindful of rate limits\n",
    "\n",
    "        # 전체 데이터를 json로 저장\n",
    "        if all_articles:\n",
    "            save_to_json(all_articles, filename)\n",
    "            print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] 전체 {len(all_articles)}개의 매물 데이터가 {filename}에 저장되었습니다.\")\n",
    "        else:\n",
    "            print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] 수집할 매물 데이터가 없습니다.\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"오류가 발생했습니다: {str(e)}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
